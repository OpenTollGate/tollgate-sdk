# .github/workflows/build-firmware.yml
name: Build Firmware

on:
  workflow_run:
    workflows: ["Prebuild Golang"]
    types:
      - completed
  repository_dispatch:
    types: [module-build-completed]
  push:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Run at midnight UTC every day

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Test Blossom Upload with Simple File
        run: |
          # Create a simple test file
          echo "This is a test file" > test.txt
          # Calculate its hash
          ORIGINAL_HASH=$(sha256sum test.txt | cut -d' ' -f1)
          echo "Original hash: $ORIGINAL_HASH"
          
          # Save the hash for later comparison
          echo "ORIGINAL_HASH=$ORIGINAL_HASH" >> $GITHUB_ENV

      - name: Upload Test File to Blossom
        id: upload_test
        continue-on-error: true
        uses: c03rad0r/cli-blossom-uploader-go@main
        with:
          host: "https://blossom.swissdash.site"
          filePath: test.txt
          nostrPrivateKey: ${{ secrets.NSECBECH }}

      - name: Report Test File URLa
        run: |
          echo "Test file uploaded to: ${{ steps.upload_test.outputs.url }}"
          echo "Test file hash: ${{ steps.upload_test.outputs.hash }}"
          
          # Compare the hashes
          if [ "${{ env.ORIGINAL_HASH }}" != "${{ steps.upload_test.outputs.hash }}" ]; then
            echo "WARNING: Hashes don't match!"
            echo "Original hash: ${{ env.ORIGINAL_HASH }}"
            echo "Blossom hash:  ${{ steps.upload_test.outputs.hash }}"
            echo "This indicates the file was modified during upload."
          else
            echo "Hashes match! File integrity preserved during upload."
          fi

  build:
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    strategy:
      matrix:
        module: [
          "tollgate-module-relay-go",
          "tollgate-module-merchant-go",
          "tollgate-module-valve-go",
          "tollgate-module-whoami-go",
          "tollgate-module-janitor-go",
          "tollgate-module-crowsnest-go"
        ]
        target: [
          {model: "gl-ar300m", platform: "ath79", subtarget: "generic"},
          {model: "gl-mt3000", platform: "mediatek", subtarget: "filogic"},
          {model: "gl-mt6000", platform: "mediatek", subtarget: "filogic"}
        ]
    steps:
      - name: Download Prebuilt Golang
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: prebuild-golang.yml
          workflow_conclusion: success
          name: golang-${{ matrix.target.model }}-${{ matrix.target.platform }}-${{ matrix.target.subtarget }}
          path: prebuilt/
          repo: OpenTollGate/tollgate-sdk
          github_token: ${{ secrets.GITHUB_TOKEN }}
          continue-on-error: true

      - name: Debug Download Directory
        run: |
          echo "Input value: '${{ inputs.prebuilt_golang }}'"
          mkdir -p prebuilt  # Create the directory if it doesn't exist
          ls -la .
          ls -la prebuilt || echo "Prebuilt directory is empty"

      # - name: Setup Build Environment
      #   shell: bash
      #   run: |
      #     # Check if the prebuilt directory exists and contains the main golang package (not just docs)
      #     if [ -d "prebuilt" ] && [ -n "$(find prebuilt -name "golang_*.ipk" 2>/dev/null)" ]; then
      #       echo "Using prebuilt golang package from prebuilt directory"
      #       mkdir -p "${SDK_PATH}/bin/packages/${PLATFORM}"
            
      #       # Find the main golang IPK file in the prebuilt directory (note the underscore)
      #       GOLANG_IPK=$(find "prebuilt" -name "golang_*.ipk" | head -1)
            
      #       if [ -z "$GOLANG_IPK" ]; then
      #         echo "Main golang compiler package not found, looking for any golang package"
      #         GOLANG_IPK=$(find "prebuilt" -name "golang*.ipk" | head -1)
      #       fi
            
      #       if [ -n "$GOLANG_IPK" ] && [ -f "$GOLANG_IPK" ]; then
      #         echo "Found golang package: $GOLANG_IPK"
      #         cp "$GOLANG_IPK" "${SDK_PATH}/bin/packages/${PLATFORM}/"
      #         echo "Copied golang package to SDK"
              
      #         # Install the prebuilt package
      #         cd "${SDK_PATH}"
      #         ./scripts/feeds update -a
      #         ./scripts/feeds install golang
      #       else
      #         echo "No prebuilt golang package found, continuing without it"
      #       fi
      #     else
      #       echo "No prebuilt golang directory available, continuing without it"
      #     fi
          
      #     echo "Examining package dump files..."


      - name: Checkout SDK
        uses: actions/checkout@v4
        with:
          repository: OpenTollGate/tollgate-sdk
          path: .

      - name: Build Firmware
        id: build_firmware
        uses: ./
        with:
          model: ${{ matrix.target.model }}
          platform: ${{ matrix.target.platform }}
          subtarget: ${{ matrix.target.subtarget }}
          prebuilt_golang: ${{ github.event_name == 'workflow_run' && 'prebuilt' || '' }}
          module: ${{ matrix.module }}

      - name: Debug Package Path
        run: |
          if [ -n "${{ env.PACKAGE_FULLPATH }}" ]; then
            echo "Package Path: ${{ env.PACKAGE_FULLPATH }}"
            ls -la "${{ env.PACKAGE_FULLPATH }}"
            
            # Calculate and store the hash for later comparison
            PACKAGE_HASH=$(sha256sum "${{ env.PACKAGE_FULLPATH }}" | cut -d' ' -f1)
            echo "PACKAGE_HASH=$PACKAGE_HASH" >> $GITHUB_ENV
            echo "Original package hash: $PACKAGE_HASH"
            
            # Get file size
            FILE_SIZE=$(stat -c%s "${{ env.PACKAGE_FULLPATH }}")
            echo "FILE_SIZE=$FILE_SIZE" >> $GITHUB_ENV
            
            # Extract module name from the package name (remove tollgate-module- prefix)
            MODULE_NAME=$(echo "${{ matrix.module }}" | sed 's/tollgate-module-//;s/-go//')
            echo "MODULE_NAME=$MODULE_NAME" >> $GITHUB_ENV
            
            # Map target architecture to release.json architecture format
            if [[ "${{ matrix.target.platform }}" == "ath79" ]]; then
              ARCH="mipsel_24kc"
            elif [[ "${{ matrix.target.platform }}" == "mediatek" ]]; then
              ARCH="aarch64_cortex-a53"
            else
              ARCH="unknown"
            fi
            echo "ARCH=$ARCH" >> $GITHUB_ENV
          else
            echo "Warning: No package path found in environment"
          fi

      - name: Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.target.model }}-${{ matrix.module }}
          path: ${{ env.PACKAGE_FULLPATH }}
          retention-days: 5

      - name: Check File Before Upload
        run: |
          echo "Checking file before upload to Blossom:"
          echo "File path: ${{ env.PACKAGE_FULLPATH }}"
          if [ -f "${{ env.PACKAGE_FULLPATH }}" ]; then
            echo "File exists"
            echo "File size: $(du -h "${{ env.PACKAGE_FULLPATH }}" | cut -f1)"
            echo "File type: $(file "${{ env.PACKAGE_FULLPATH }}")"
            
            # Try to list contents if it's an archive
            echo "Attempting to list contents:"
            ar t "${{ env.PACKAGE_FULLPATH }}" || echo "Not an ar archive"
          else
            echo "File does not exist!"
          fi

      - name: Upload Package to Blossom
        id: upload_package
        uses: c03rad0r/cli-blossom-uploader-go@main
        with:
          host: "https://blossom.swissdash.site"
          filePath: ${{ env.PACKAGE_FULLPATH }}
          nostrPrivateKey: ${{ secrets.NSECBECH }}

      - name: Report Package Upload Results
        run: |
          if [ "${{ steps.upload_package.outputs.success }}" == "true" ]; then
            echo "✅ Package uploaded successfully!"
            echo "URL: ${{ steps.upload_package.outputs.url }}"
            echo "Blossom hash: ${{ steps.upload_package.outputs.hash }}"
            echo "Original hash: ${{ env.PACKAGE_HASH }}"
            
            # Compare hashes
            if [ "${{ steps.upload_package.outputs.hash }}" == "${{ env.PACKAGE_HASH }}" ]; then
              echo "✅ Hash verification successful!"
            else
              echo "⚠️ Hash mismatch! File may have been modified during upload."
              echo "Original: ${{ env.PACKAGE_HASH }}"
              echo "Reported: ${{ steps.upload_package.outputs.hash }}"
            fi
          else
            echo "❌ Package upload failed!"
            echo "Error: ${{ steps.upload_package.outputs.error }}"
          fi

      - name: Download Uploaded Package
        if: steps.upload_package.outputs.success == 'true'
        run: |
          # Download the file we just uploaded
          curl -L "${{ steps.upload_package.outputs.url }}" -o downloaded-package.ipk
          
          # Calculate hash of downloaded file
          DOWNLOADED_HASH=$(sha256sum downloaded-package.ipk | cut -d' ' -f1)
          echo "DOWNLOADED_HASH=$DOWNLOADED_HASH" >> $GITHUB_ENV
          
          echo "Downloaded package with hash: $DOWNLOADED_HASH"
          
          # Compare original and downloaded file hashes
          if [ "${{ env.PACKAGE_HASH }}" == "$DOWNLOADED_HASH" ]; then
            echo "✅ End-to-end verification successful!"
            echo "The package was uploaded and downloaded without any modifications."
          else
            echo "❌ End-to-end verification failed!"
            echo "Original hash: ${{ env.PACKAGE_HASH }}"
            echo "Downloaded hash: $DOWNLOADED_HASH"
            echo "This indicates the file was modified during upload or download."
          fi

      - name: Publish Package NIP-94 Metadata
        id: publish_package
        if: steps.upload_package.outputs.success == 'true'
        uses: OpenTollGate/nostr-publish-file-metadata-action/python@main
        with:
          relays: wss://relay.damus.io,wss://nos.lol,wss://nostr.mom/
          url: ${{ steps.upload_package.outputs.url }}
          mimeType: application/octet-stream
          fileHash: ${{ steps.upload_package.outputs.hash }}
          originalHash: ${{ env.PACKAGE_HASH }}
          filename: ${{ env.MODULE_NAME }}-${{ matrix.target.model }}-${{ env.ARCH }}.ipk
          content: "TollGate Module Package: ${{ env.MODULE_NAME }} for ${{ matrix.target.model }}"
          nsec: ${{ secrets.NSEC }}
          size: ${{ env.FILE_SIZE }}
          architecture: ${{ env.ARCH }}
          model: ${{ matrix.target.model }}
          module: ${{ env.MODULE_NAME }}
          version: "0.0.1"

      - name: Verify Package NIP-94 Event
        id: verify_package
        if: steps.publish_package.outputs.eventId != ''
        uses: OpenTollGate/nostr-publish-file-metadata-action/python/verify@main
        with:
          eventId: ${{ steps.publish_package.outputs.eventId }}
          relays: wss://relay.damus.io,wss://nos.lol,wss://nostr.mom/

  #     - name: Create Event JSON File
  #       if: steps.publish_package.outputs.eventId != ''
  #       run: |
  #         # Create a JSON file with the event information
  #         echo '{
  #           "eventId": "${{ steps.publish_package.outputs.eventId }}",
  #           "hash": "${{ steps.upload_package.outputs.hash }}",
  #           "url": "${{ steps.upload_package.outputs.url }}",
  #           "module": "${{ env.MODULE_NAME }}",
  #           "model": "${{ matrix.target.model }}",
  #           "architecture": "${{ env.ARCH }}"
  #         }' > event-${{ env.MODULE_NAME }}-${{ matrix.target.model }}.json
          
  #         # Upload the event file as an artifact
  #         mkdir -p event-artifacts
  #         cp event-${{ env.MODULE_NAME }}-${{ matrix.target.model }}.json event-artifacts/

  #     - name: Upload Event Artifact
  #       if: steps.publish_package.outputs.eventId != ''
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ env.MODULE_NAME }}-${{ matrix.target.model }}-event
  #         path: event-artifacts/
  #         retention-days: 5

  # trigger-release-update:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: success()
  #   steps:
  #     - name: Download All Artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: artifacts

  #     - name: Collect NIP-94 Event Data
  #       id: collect_events
  #       run: |
  #         # Create a JSON file with all event data
  #         echo "{\"events\": [" > events.json
          
  #         # Find all event JSON files and combine them
  #         FIRST=true
  #         for EVENT_FILE in $(find artifacts -name "*-event.json"); do
  #           if [ "$FIRST" = "true" ]; then
  #             FIRST=false
  #           else
  #             echo "," >> events.json
  #           fi
  #           cat $EVENT_FILE >> events.json
  #         done
          
  #         echo "]}" >> events.json
          
  #         # Store the event data for the next step
  #         EVENT_DATA=$(cat events.json)
  #         echo "event_data<<EOF" >> $GITHUB_ENV
  #         echo "$EVENT_DATA" >> $GITHUB_ENV
  #         echo "EOF" >> $GITHUB_ENV
  install-os:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger OS Workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          repository: OpenTollGate/tollgate-os
          event-type: update-release-json
