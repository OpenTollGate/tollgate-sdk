# .github/workflows/build-firmware.yml
name: Build Firmware

on:
  workflow_run:
    workflows: ["Prebuild Golang"]
    types:
      - completed
  push:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Basic setup steps that don't depend on anything

      - name: Test Blossom Upload with Simple File
        run: |
          # Create a simple test file
          echo "This is a test file" > test.txt
          # Calculate its hash
          ORIGINAL_HASH=$(sha256sum test.txt | cut -d' ' -f1)
          echo "Original hash: $ORIGINAL_HASH"
          
          # Save the hash for later comparison
          echo "ORIGINAL_HASH=$ORIGINAL_HASH" >> $GITHUB_ENV

      - name: Upload Test File to Blossom
        id: upload_test
        continue-on-error: true
        uses: c03rad0r/cli-blossom-uploader-go@main
        with:
          host: "https://blossom.swissdash.site"
          filePath: test.txt
          nostrPrivateKey: ${{ secrets.NSEC }}

      - name: Report Test File URL
        run: |
          echo "Test file uploaded to: ${{ steps.upload_test.outputs.url }}"
          echo "Test file hash: ${{ steps.upload_test.outputs.hash }}"
          
          # Compare the hashes
          if [ "${{ env.ORIGINAL_HASH }}" != "${{ steps.upload_test.outputs.hash }}" ]; then
            echo "WARNING: Hashes don't match!"
            echo "Original hash: ${{ env.ORIGINAL_HASH }}"
            echo "Blossom hash:  ${{ steps.upload_test.outputs.hash }}"
            echo "This indicates the file was modified during upload."
          else
            echo "Hashes match! File integrity preserved during upload."
          fi


  build:
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    strategy:
      matrix:
        module: [
          "tollgate-module-relay-go"#,
          #"tollgate-module-merchant-go",
          #"tollgate-module-valve-go",
          #"tollgate-module-whoami-go",
          #"tollgate-module-janitor-go",
          #"tollgate-module-crowsnest-go"
        ]
        target: [
          {model: "gl-ar300m", platform: "ath79", subtarget: "generic"},
          {model: "gl-mt3000", platform: "mediatek", subtarget: "filogic"},
          {model: "gl-mt6000", platform: "mediatek", subtarget: "filogic"}
        ]
    steps:
      - name: Download Prebuilt Golang
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: prebuild-golang.yml
          workflow_conclusion: success
          name: golang-${{ matrix.target.model }}-${{ matrix.target.platform }}-${{ matrix.target.subtarget }}
          path: prebuilt/
          repo: OpenTollGate/tollgate-sdk
          github_token: ${{ secrets.GITHUB_TOKEN }}
          continue-on-error: true

      - name: Checkout SDK
        uses: actions/checkout@v4
        with:
          repository: OpenTollGate/tollgate-sdk
          path: .

      - name: Build Firmware
        id: build_firmware
        uses: ./
        with:
          model: ${{ matrix.target.model }}
          platform: ${{ matrix.target.platform }}
          subtarget: ${{ matrix.target.subtarget }}
          prebuilt_golang: ${{ github.event_name == 'workflow_run' && 'prebuilt/golang*.ipk' || '' }}
          module: ${{ matrix.module }}

      - name: Debug Package Path
        run: |
          if [ -n "${{ env.PACKAGE_FULLPATH }}" ]; then
            echo "Package Path: ${{ env.PACKAGE_FULLPATH }}"
            ls -la "${{ env.PACKAGE_FULLPATH }}"
            
            # Calculate and store the hash for later comparison
            PACKAGE_HASH=$(sha256sum "${{ env.PACKAGE_FULLPATH }}" | cut -d' ' -f1)
            echo "PACKAGE_HASH=$PACKAGE_HASH" >> $GITHUB_ENV
            echo "Original package hash: $PACKAGE_HASH"
          else
            echo "Warning: No package path found in environment"
          fi

      - name: Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.target.model }}-${{ matrix.module }}
          path: ${{ env.PACKAGE_FULLPATH }}
          retention-days: 5

      - name: Check File Before Upload
        run: |
          echo "Checking file before upload to Blossom:"
          echo "File path: ${{ env.PACKAGE_FULLPATH }}"
          if [ -f "${{ env.PACKAGE_FULLPATH }}" ]; then
            echo "File exists"
            echo "File size: $(du -h "${{ env.PACKAGE_FULLPATH }}" | cut -f1)"
            echo "File type: $(file "${{ env.PACKAGE_FULLPATH }}")"
            
            # Try to list contents if it's an archive
            echo "Attempting to list contents:"
            ar t "${{ env.PACKAGE_FULLPATH }}" || echo "Not an ar archive"
          else
            echo "File does not exist!"
          fi

      - name: Upload Package to Blossom
        id: upload_package
        uses: c03rad0r/cli-blossom-uploader-go@main
        with:
          host: "https://blossom.swissdash.site"
          filePath: ${{ env.PACKAGE_FULLPATH }}
          nostrPrivateKey: ${{ secrets.NSEC }}

      - name: Report Package Upload Results
        run: |
          if [ "${{ steps.upload_package.outputs.success }}" == "true" ]; then
            echo "✅ Package uploaded successfully!"
            echo "URL: ${{ steps.upload_package.outputs.url }}"
            echo "Blossom hash: ${{ steps.upload_package.outputs.hash }}"
            echo "Original hash: ${{ env.PACKAGE_HASH }}"
            
            # Compare hashes
            if [ "${{ steps.upload_package.outputs.hash }}" == "${{ env.PACKAGE_HASH }}" ]; then
              echo "✅ Hash verification successful!"
            else
              echo "⚠️ Hash mismatch! File may have been modified during upload."
              echo "Original: ${{ env.PACKAGE_HASH }}"
              echo "Reported: ${{ steps.upload_package.outputs.hash }}"
            fi
          else
            echo "❌ Package upload failed!"
            echo "Error: ${{ steps.upload_package.outputs.error }}"
          fi

      - name: Download Uploaded Package
        if: steps.upload_package.outputs.success == 'true'
        run: |
          # Download the file we just uploaded
          curl -L "${{ steps.upload_package.outputs.url }}" -o downloaded-package.ipk
          
          # Calculate hash of downloaded file
          DOWNLOADED_HASH=$(sha256sum downloaded-package.ipk | cut -d' ' -f1)
          echo "DOWNLOADED_HASH=$DOWNLOADED_HASH" >> $GITHUB_ENV
          
          echo "Downloaded package with hash: $DOWNLOADED_HASH"
          
          # Compare original and downloaded file hashes
          if [ "${{ env.PACKAGE_HASH }}" == "$DOWNLOADED_HASH" ]; then
            echo "✅ End-to-end verification successful!"
            echo "The package was uploaded and downloaded without any modifications."
          else
            echo "❌ End-to-end verification failed!"
            echo "Original hash: ${{ env.PACKAGE_HASH }}"
            echo "Downloaded hash: $DOWNLOADED_HASH"
            echo "This indicates the file was modified during upload or download."
          fi
