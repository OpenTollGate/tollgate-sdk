# .github/workflows/build-firmware.yml
name: Build Firmware

on:
  workflow_run:
    workflows: ["Prebuild Golang"]
    types:
      - completed
  push:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Basic setup steps that don't depend on anything

      - name: Test Blossom Upload with Simple File
        run: |
          # Create a simple test file
          echo "This is a test file" > test.txt
          # Calculate its hash
          ORIGINAL_HASH=$(sha256sum test.txt | cut -d' ' -f1)
          echo "Original hash: $ORIGINAL_HASH"
          
          # Save the hash for later comparison
          echo "ORIGINAL_HASH=$ORIGINAL_HASH" >> $GITHUB_ENV

      - name: Upload Test File to Blossom
        id: upload_test
        uses: c03rad0r/upload-blossom-action@pr/using-nsec-argument-correct-state
        with:
          host: "https://blossom.swissdash.site"
          filePath: test.txt
          nostrPrivateKey: ${{ secrets.NSEC }}

      - name: Report Test File URL
        run: |
          echo "Test file uploaded to: ${{ steps.upload_test.outputs.blossomUrl }}"
          echo "Test file hash: ${{ steps.upload_test.outputs.blossomHash }}"
          
          # Compare the hashes
          if [ "${{ env.ORIGINAL_HASH }}" != "${{ steps.upload_test.outputs.blossomHash }}" ]; then
            echo "WARNING: Hashes don't match!"
            echo "Original hash: ${{ env.ORIGINAL_HASH }}"
            echo "Blossom hash:  ${{ steps.upload_test.outputs.blossomHash }}"
            echo "This indicates the file was modified during upload."
          else
            echo "Hashes match! File integrity preserved during upload."
          fi


  build:
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    strategy:
      matrix:
        module: [
          "tollgate-module-relay-go"#,
          #"tollgate-module-merchant-go",
          #"tollgate-module-valve-go",
          #"tollgate-module-whoami-go",
          #"tollgate-module-janitor-go",
          #"tollgate-module-crowsnest-go"
        ]
        target: [
          {model: "gl-ar300m", platform: "ath79", subtarget: "generic"},
          {model: "gl-mt3000", platform: "mediatek", subtarget: "filogic"},
          {model: "gl-mt6000", platform: "mediatek", subtarget: "filogic"}
        ]
    steps:
      - name: Download Prebuilt Golang
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: prebuild-golang.yml
          workflow_conclusion: success
          name: golang-${{ matrix.target.model }}-${{ matrix.target.platform }}-${{ matrix.target.subtarget }}
          path: prebuilt/
          repo: OpenTollGate/tollgate-sdk
          github_token: ${{ secrets.GITHUB_TOKEN }}
          continue-on-error: true

      - name: Checkout SDK
        uses: actions/checkout@v4
        with:
          repository: OpenTollGate/tollgate-sdk
          path: .

      - name: Build Firmware
        id: build_firmware
        uses: ./
        with:
          model: ${{ matrix.target.model }}
          platform: ${{ matrix.target.platform }}
          subtarget: ${{ matrix.target.subtarget }}
          prebuilt_golang: ${{ github.event_name == 'workflow_run' && 'prebuilt/golang*.ipk' || '' }}
          module: ${{ matrix.module }}

      - name: Debug Package Path
        run: |
          if [ -n "${{ env.PACKAGE_FULLPATH }}" ]; then
            echo "Package Path: ${{ env.PACKAGE_FULLPATH }}"
            ls -la "${{ env.PACKAGE_FULLPATH }}"
          else
            echo "Warning: No package path found in environment"
          fi

      - name: Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.target.model }}-${{ matrix.module }}
          path: ${{ env.PACKAGE_FULLPATH }}
          retention-days: 5

      - name: Check File Before Upload
        run: |
          echo "Checking file before upload to Blossom:"
          echo "File path: ${{ env.PACKAGE_FULLPATH }}"
          if [ -f "${{ env.PACKAGE_FULLPATH }}" ]; then
            echo "File exists"
            echo "File size: $(du -h "${{ env.PACKAGE_FULLPATH }}" | cut -f1)"
            echo "File type: $(file "${{ env.PACKAGE_FULLPATH }}")"
            
            # Try to list contents if it's an archive
            echo "Attempting to list contents:"
            ar t "${{ env.PACKAGE_FULLPATH }}" || echo "Not an ar archive"
          else
            echo "File does not exist!"
          fi

      - name: Prepare IPK for Blossom Upload
        run: |
          # Create a zip containing the IPK
          zip package.zip "${{ env.PACKAGE_FULLPATH }}"
          echo "ZIPPED_PACKAGE=package.zip" >> $GITHUB_ENV

      - name: Upload Zipped Package to Blossom
        id: upload_package
        uses: c03rad0r/upload-blossom-action@pr/using-nsec-argument-correct-state
        with:
          host: "https://blossom.swissdash.site"
          filePath: ${{ env.ZIPPED_PACKAGE }}
          nostrPrivateKey: ${{ secrets.NSEC }}

      - name: Publish Package NIP-94 Metadata
        id: publish_package
        uses: OpenTollGate/nostr-publish-file-metadata-action/python@main
        with:
          relays: wss://relay.damus.io,wss://nos.lol,wss://nostr.mom/
          url: ${{ steps.upload_package.outputs.url }}
          mimeType: application/zip
          fileHash: ${{ steps.upload_package.outputs.hash }}
          originalHash: ${{ steps.upload_package.outputs.hash }}
          content: "TollGate Module Package: ${{ env.PACKAGE_NAME }}"
          nsec: ${{ secrets.NSEC }}
          size: ${{ env.ZIP_SIZE }}
          architecture: ${{ matrix.target || 'all' }}

      - name: Verify Package NIP-94 Event
        id: verify_package
        uses: OpenTollGate/nostr-publish-file-metadata-action/python/verify@main
        with:
          eventId: ${{ steps.publish_package.outputs.eventId }}
          relays: wss://relay.damus.io,wss://nos.lol,wss://nostr.mom/