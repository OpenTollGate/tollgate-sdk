# .github/workflows/build-firmware.yml
name: Build Firmware

on:
  workflow_run:
    workflows: ["Prebuild Golang"]
    types:
      - completed
  push:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Test Blossom Upload with Simple File
        run: |
          # Create a simple test file
          echo "This is a test file" > test.txt
          # Calculate its hash
          ORIGINAL_HASH=$(sha256sum test.txt | cut -d' ' -f1)
          echo "Original hash: $ORIGINAL_HASH"
          
          # Save the hash for later comparison
          echo "ORIGINAL_HASH=$ORIGINAL_HASH" >> $GITHUB_ENV

      - name: Upload Test File to Blossom
        id: upload_test
        continue-on-error: true
        uses: c03rad0r/cli-blossom-uploader-go@main
        with:
          host: "https://blossom.swissdash.site"
          filePath: test.txt
          nostrPrivateKey: ${{ secrets.NSECBECH }}

      - name: Report Test File URL
        run: |
          echo "Test file uploaded to: ${{ steps.upload_test.outputs.url }}"
          echo "Test file hash: ${{ steps.upload_test.outputs.hash }}"
          
          # Compare the hashes
          if [ "${{ env.ORIGINAL_HASH }}" != "${{ steps.upload_test.outputs.hash }}" ]; then
            echo "WARNING: Hashes don't match!"
            echo "Original hash: ${{ env.ORIGINAL_HASH }}"
            echo "Blossom hash:  ${{ steps.upload_test.outputs.hash }}"
            echo "This indicates the file was modified during upload."
          else
            echo "Hashes match! File integrity preserved during upload."
          fi

  build:
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    strategy:
      matrix:
        module: [
          "tollgate-module-relay-go"#,
          #"tollgate-module-merchant-go",
          #"tollgate-module-valve-go",
          #"tollgate-module-whoami-go",
          #"tollgate-module-janitor-go",
          #"tollgate-module-crowsnest-go"
        ]
        target: [
          {model: "gl-ar300m", platform: "ath79", subtarget: "generic"},
          {model: "gl-mt3000", platform: "mediatek", subtarget: "filogic"},
          {model: "gl-mt6000", platform: "mediatek", subtarget: "filogic"}
        ]
    steps:
      - name: Download Prebuilt Golang
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: prebuild-golang.yml
          workflow_conclusion: success
          name: golang-${{ matrix.target.model }}-${{ matrix.target.platform }}-${{ matrix.target.subtarget }}
          path: prebuilt/
          repo: OpenTollGate/tollgate-sdk
          github_token: ${{ secrets.GITHUB_TOKEN }}
          continue-on-error: true

      - name: Checkout SDK
        uses: actions/checkout@v4
        with:
          repository: OpenTollGate/tollgate-sdk
          path: .

      - name: Build Firmware
        id: build_firmware
        uses: ./
        with:
          model: ${{ matrix.target.model }}
          platform: ${{ matrix.target.platform }}
          subtarget: ${{ matrix.target.subtarget }}
          prebuilt_golang: ${{ github.event_name == 'workflow_run' && 'prebuilt/golang*.ipk' || '' }}
          module: ${{ matrix.module }}

      - name: Debug Package Path
        run: |
          if [ -n "${{ env.PACKAGE_FULLPATH }}" ]; then
            echo "Package Path: ${{ env.PACKAGE_FULLPATH }}"
            ls -la "${{ env.PACKAGE_FULLPATH }}"
            
            # Calculate and store the hash for later comparison
            PACKAGE_HASH=$(sha256sum "${{ env.PACKAGE_FULLPATH }}" | cut -d' ' -f1)
            echo "PACKAGE_HASH=$PACKAGE_HASH" >> $GITHUB_ENV
            echo "Original package hash: $PACKAGE_HASH"
            
            # Get file size
            FILE_SIZE=$(stat -c%s "${{ env.PACKAGE_FULLPATH }}")
            echo "FILE_SIZE=$FILE_SIZE" >> $GITHUB_ENV
            
            # Extract module name from the package name (remove tollgate-module- prefix)
            MODULE_NAME=$(echo "${{ matrix.module }}" | sed 's/tollgate-module-//;s/-go//')
            echo "MODULE_NAME=$MODULE_NAME" >> $GITHUB_ENV
            
            # Map target architecture to release.json architecture format
            if [[ "${{ matrix.target.platform }}" == "ath79" ]]; then
              ARCH="mipsel_24kc"
            elif [[ "${{ matrix.target.platform }}" == "mediatek" ]]; then
              ARCH="aarch64_cortex-a53"
            else
              ARCH="unknown"
            fi
            echo "ARCH=$ARCH" >> $GITHUB_ENV
          else
            echo "Warning: No package path found in environment"
          fi

      - name: Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.target.model }}-${{ matrix.module }}
          path: ${{ env.PACKAGE_FULLPATH }}
          retention-days: 5

      - name: Check File Before Upload
        run: |
          echo "Checking file before upload to Blossom:"
          echo "File path: ${{ env.PACKAGE_FULLPATH }}"
          if [ -f "${{ env.PACKAGE_FULLPATH }}" ]; then
            echo "File exists"
            echo "File size: $(du -h "${{ env.PACKAGE_FULLPATH }}" | cut -f1)"
            echo "File type: $(file "${{ env.PACKAGE_FULLPATH }}")"
            
            # Try to list contents if it's an archive
            echo "Attempting to list contents:"
            ar t "${{ env.PACKAGE_FULLPATH }}" || echo "Not an ar archive"
          else
            echo "File does not exist!"
          fi

      - name: Upload Package to Blossom
        id: upload_package
        uses: c03rad0r/cli-blossom-uploader-go@main
        with:
          host: "https://blossom.swissdash.site"
          filePath: ${{ env.PACKAGE_FULLPATH }}
          nostrPrivateKey: ${{ secrets.NSECBECH }}

      - name: Report Package Upload Results
        run: |
          if [ "${{ steps.upload_package.outputs.success }}" == "true" ]; then
            echo "✅ Package uploaded successfully!"
            echo "URL: ${{ steps.upload_package.outputs.url }}"
            echo "Blossom hash: ${{ steps.upload_package.outputs.hash }}"
            echo "Original hash: ${{ env.PACKAGE_HASH }}"
            
            # Compare hashes
            if [ "${{ steps.upload_package.outputs.hash }}" == "${{ env.PACKAGE_HASH }}" ]; then
              echo "✅ Hash verification successful!"
            else
              echo "⚠️ Hash mismatch! File may have been modified during upload."
              echo "Original: ${{ env.PACKAGE_HASH }}"
              echo "Reported: ${{ steps.upload_package.outputs.hash }}"
            fi
          else
            echo "❌ Package upload failed!"
            echo "Error: ${{ steps.upload_package.outputs.error }}"
          fi

      - name: Download Uploaded Package
        if: steps.upload_package.outputs.success == 'true'
        run: |
          # Download the file we just uploaded
          curl -L "${{ steps.upload_package.outputs.url }}" -o downloaded-package.ipk
          
          # Calculate hash of downloaded file
          DOWNLOADED_HASH=$(sha256sum downloaded-package.ipk | cut -d' ' -f1)
          echo "DOWNLOADED_HASH=$DOWNLOADED_HASH" >> $GITHUB_ENV
          
          echo "Downloaded package with hash: $DOWNLOADED_HASH"
          
          # Compare original and downloaded file hashes
          if [ "${{ env.PACKAGE_HASH }}" == "$DOWNLOADED_HASH" ]; then
            echo "✅ End-to-end verification successful!"
            echo "The package was uploaded and downloaded without any modifications."
          else
            echo "❌ End-to-end verification failed!"
            echo "Original hash: ${{ env.PACKAGE_HASH }}"
            echo "Downloaded hash: $DOWNLOADED_HASH"
            echo "This indicates the file was modified during upload or download."
          fi

      - name: Publish Package NIP-94 Metadata
        id: publish_package
        if: steps.upload_package.outputs.success == 'true'
        uses: OpenTollGate/nostr-publish-file-metadata-action/python@main
        with:
          relays: wss://relay.damus.io,wss://nos.lol,wss://nostr.mom/
          url: ${{ steps.upload_package.outputs.url }}
          mimeType: application/octet-stream
          fileHash: ${{ steps.upload_package.outputs.hash }}
          originalHash: ${{ env.PACKAGE_HASH }}
          content: "TollGate Module Package: ${{ env.MODULE_NAME }} for ${{ matrix.target.model }}"
          nsec: ${{ secrets.NSECBECH }}
          size: ${{ env.FILE_SIZE }}
          architecture: ${{ env.ARCH }}
          model: ${{ matrix.target.model }}
          module: ${{ env.MODULE_NAME }}
          version: "0.0.1"

      - name: Verify Package NIP-94 Event
        id: verify_package
        if: steps.publish_package.outputs.eventId != ''
        uses: OpenTollGate/nostr-publish-file-metadata-action/python/verify@main
        with:
          eventId: ${{ steps.publish_package.outputs.eventId }}
          relays: wss://relay.damus.io,wss://nos.lol,wss://nostr.mom/

  update-release-json:
    runs-on: ubuntu-latest
    needs: build
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout TollGate OS Repository
        uses: actions/checkout@v4
        with:
          repository: OpenTollGate/tollgate-os
          path: tollgate-os
          token: ${{ secrets.REPO_ACCESS_TOKEN }}

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List Downloaded Artifacts
        run: |
          find artifacts -type f | sort

      - name: Update release.json
        run: |
          cd tollgate-os
          
          # Create a backup of the original file
          cp release.json release.json.bak
          
          # Process each artifact and update release.json
          for ARTIFACT_DIR in ../artifacts/package-*; do
            if [ -d "$ARTIFACT_DIR" ]; then
              # Extract model and module from directory name
              DIR_NAME=$(basename "$ARTIFACT_DIR")
              MODEL=$(echo "$DIR_NAME" | cut -d'-' -f2)
              MODULE_FULL=$(echo "$DIR_NAME" | cut -d'-' -f3-)
              MODULE=$(echo "$MODULE_FULL" | sed 's/tollgate-module-//;s/-go//')
              
              # Find the IPK file
              IPK_FILE=$(find "$ARTIFACT_DIR" -name "*.ipk" | head -1)
              
              if [ -n "$IPK_FILE" ]; then
                # Get file hash and size
                FILE_HASH=$(sha256sum "$IPK_FILE" | cut -d' ' -f1)
                FILE_SIZE=$(stat -c%s "$IPK_FILE")
                
                # Map model to architecture
                if [[ "$MODEL" == "gl-ar300m" ]]; then
                  ARCH="mipsel_24kc"
                elif [[ "$MODEL" == "gl-mt3000" || "$MODEL" == "gl-mt6000" ]]; then
                  ARCH="aarch64_cortex-a53"
                else
                  ARCH="unknown"
                fi
                
                # Get event ID from workflow outputs (if available)
                EVENT_ID=$(grep -r "eventId.*$FILE_HASH" ../artifacts || echo "")
                if [[ "$EVENT_ID" =~ eventId\":\"([a-f0-9]+) ]]; then
                  EVENT_ID="${BASH_REMATCH[1]}"
                else
                  EVENT_ID="[NIP94_EVENT_ID]"
                fi
                
                echo "Updating release.json for module $MODULE, model $MODEL, arch $ARCH"
                echo "File hash: $FILE_HASH"
                
                # Use jq to update the release.json file
                # This is a complex operation that requires careful JSON manipulation
                TMP_FILE=$(mktemp)
                jq --arg module "$MODULE" \
                   --arg arch "$ARCH" \
                   --arg url "https://blossom.swissdash.site/$FILE_HASH.ipk" \
                   --arg hash "$FILE_HASH" \
                   --arg eventId "$EVENT_ID" \
                   '(.modules[] | select(.name == $module) | .versions[0].architectures[$arch]).url = $url |
                    (.modules[] | select(.name == $module) | .versions[0].architectures[$arch]).hash = ("sha256:" + $hash) |
                    (.modules[] | select(.name == $module) | .versions[0].architectures[$arch]).eventId = $eventId' \
                   release.json > "$TMP_FILE"
                
                if [ $? -eq 0 ]; then
                  mv "$TMP_FILE" release.json
                else
                  echo "Error updating JSON for $MODULE/$ARCH"
                  cat "$TMP_FILE"
                  rm "$TMP_FILE"
                fi
              fi
            fi
          done
          
          # Show the diff
          echo "Changes to release.json:"
          diff -u release.json.bak release.json || true

      - name: Commit and Push Changes
        run: |
          cd tollgate-os
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          git add release.json
          
          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to release.json, skipping commit"
          else
            git commit -m "Update release.json with latest module packages [skip ci]"
            git push
          fi
