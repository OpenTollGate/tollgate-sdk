name: Test Release JSON Update

on:
  push:
    branches:
      - update-release-json
  workflow_dispatch:
    inputs:
      modules:
        description: 'Comma-separated list of modules to include'
        required: false
        default: 'relay,valve,whoami'
      models:
        description: 'Comma-separated list of models to include'
        required: false
        default: 'gl-ar300m,gl-mt3000,gl-mt6000'

jobs:
  generate-real-events:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout SDK
        uses: actions/checkout@v4
        with:
          path: sdk

      - name: Create Test Package
        run: |
          CURRENT_TIME=$(date +%s)
          echo "This is a test package created at ${CURRENT_TIME}" > test-package-${CURRENT_TIME}.ipk
          echo "PACKAGE_FULLPATH=$(pwd)/test-package-${CURRENT_TIME}.ipk" >> $GITHUB_ENV

      - name: Upload Test Package to Blossom
        id: upload_test
        uses: c03rad0r/cli-blossom-uploader-go@main
        with:
          host: "https://blossom.swissdash.site"
          filePath: ${{ env.PACKAGE_FULLPATH }}
          nostrPrivateKey: ${{ secrets.NSECBECH }}

      - name: Generate NIP-94 Event
        id: generate_event
        uses: OpenTollGate/nostr-publish-file-metadata-action/python@main
        with:
          relays: wss://relay.damus.io,wss://nos.lol,wss://nostr.mom/
          url: ${{ steps.upload_test.outputs.url }}
          mimeType: application/octet-stream
          fileHash: ${{ steps.upload_test.outputs.hash }}
          filename: "test-package-${CURRENT_TIME}.ipk"
          content: "Test Module Package"
          nsec: ${{ secrets.NSEC }}
          size: $(stat -c%s "${{ env.PACKAGE_FULLPATH }}")
          architecture: "aarch64_cortex-a53"
          model: "gl-mt3000"
          module: "test-module"
          version: "0.0.1"

      - name: Verify NIP-94 Event
        uses: OpenTollGate/nostr-publish-file-metadata-action/python/verify@main
        with:
          eventId: ${{ steps.generate_event.outputs.eventId }}
          relays: wss://relay.damus.io,wss://nos.lol,wss://nostr.mom/

      - name: Install nak
        run: |
          sudo wget https://github.com/fiatjaf/nak/releases/download/v0.12.4/nak-v0.12.4-linux-amd64 -O /usr/local/bin/nak
          sudo chmod +x /usr/local/bin/nak

      - name: Verify Event on Network with nak
        run: |
          # Get the pubkey from secrets
          PUBKEY="${{ secrets.NIP_94_PUBKEY }}"
          GENERATED_HASH="${{ steps.upload_test.outputs.hash }}"
          
          if [ -z "$PUBKEY" ]; then
            echo "::error::NIP_94_PUBKEY secret is not set"
            exit 1
          fi
          
          echo "Fetching recent NIP-94 events for pubkey: $PUBKEY"
          
          # Query events by author and kind (1063 for NIP-94)
          nak req -a "$PUBKEY" -k 1063 --limit 10 wss://relay.damus.io > event_response.txt
          
          # Check for errors in the response
          if grep -q "ERROR" event_response.txt; then
            echo "::error::Error retrieving events from relay:"
            cat event_response.txt
            exit 1
          fi
          
          # Extract only the event data (removing connection messages)
          cat event_response.txt | grep -v "connecting to" | grep -v "NOTICE" > events_data.txt
          
          # Look for our event with matching hash
          echo "Looking for event with hash: $GENERATED_HASH"
          
          # Extract unique filenames and architectures from the events
          echo "Extracting unique filenames and architectures from events..."
          
          # Create temporary files to store unique values
          touch unique_filenames.txt
          touch unique_architectures.txt
          
          # Process each event to extract filename and architecture tags
          cat events_data.txt | jq -r '.tags[] | select(.[0] == "filename") | .[1]' | sort | uniq > unique_filenames.txt
          cat events_data.txt | jq -r '.tags[] | select(.[0] == "arch") | .[1]' | sort | uniq > unique_architectures.txt
          
          echo "Unique filenames found in the last week:"
          cat unique_filenames.txt
          
          echo "Unique architectures found in the last week:"
          cat unique_architectures.txt
          
          echo "âœ… Successfully analyzed events on network!"

          
      - name: Trigger OS Workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          repository: OpenTollGate/tollgate-os
          event-type: develop