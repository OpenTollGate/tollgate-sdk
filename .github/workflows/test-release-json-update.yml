name: Test Release JSON Update

on:
  push:
    branches:
      - update-release-json
  workflow_dispatch:
    inputs:
      modules:
        description: 'Comma-separated list of modules to include'
        required: false
        default: 'relay,valve,whoami'
      models:
        description: 'Comma-separated list of models to include'
        required: false
        default: 'gl-ar300m,gl-mt3000,gl-mt6000'

jobs:
  generate-dummy-events:
    runs-on: ubuntu-latest
    steps:
      - name: Generate Dummy NIP-94 Events
        id: generate_events
        run: |
          # Parse input parameters
          IFS=',' read -ra MODULES <<< "${{ github.event.inputs.modules }}"
          IFS=',' read -ra MODELS <<< "${{ github.event.inputs.models }}"
          
          # Create events JSON structure
          echo "{\"events\": [" > events.json
          
          FIRST=true
          for MODULE in "${MODULES[@]}"; do
            for MODEL in "${MODELS[@]}"; do
              # Map model to architecture
              if [[ "$MODEL" == "gl-ar300m" ]]; then
                ARCH="mipsel_24kc"
              else
                ARCH="aarch64_cortex-a53"
              fi
              
              # Generate dummy hash (unique per module/model)
              HASH=$(echo "$MODULE-$MODEL-$(date +%s)" | sha256sum | cut -d' ' -f1)
              
              # Add comma if not first item
              if [ "$FIRST" = "true" ]; then
                FIRST=false
              else
                echo "," >> events.json
              fi
              
              # Create dummy event entry
              cat <<EOF >> events.json
              {
                "eventId": "dummy_event_id_${MODULE}_${MODEL}_$(date +%s)",
                "hash": "${HASH}",
                "url": "https://blossom.swissdash.site/${HASH}.ipk",
                "module": "${MODULE}",
                "model": "${MODEL#gl-}",
                "architecture": "${ARCH}"
              }
            EOF
            done
          done
          
          echo "]}" >> events.json
          
          # Store event data for next step
          EVENT_DATA=$(cat events.json)
          echo "event_data<<EOF" >> $GITHUB_ENV
          echo "$EVENT_DATA" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Display the generated events
          echo "Generated dummy events:"
          cat events.json | jq .

      - name: Trigger OS Workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          repository: OpenTollGate/tollgate-os
          event-type: update-release-json
          client-payload: |
            {
              "nip94_events": ${{ env.event_data }},
              "branch": "develop",
              "is_test": true
            }