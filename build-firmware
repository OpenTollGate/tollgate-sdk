#!/bin/bash
set -e

# Check and install libncurses5-dev and libncursesw5-dev libraries
install_ncurses_libraries() {
    if ! dpkg -s libncurses5-dev libncursesw5-dev >/dev/null 2>&1; then
        echo "Installing libncurses5-dev and libncursesw5-dev packages..."
        sudo apt-get update
        sudo apt-get install -y libncurses5-dev libncursesw5-dev
    else
        echo "libncurses5-dev and libncursesw5-dev are already installed."
    fi
}

# Add this function to manage Python dependencies
setup_python_environment() {
    local sdk_path=$1
    
    if [ ! -f "${sdk_path}/staging_dir/host/bin/opkg-make-index" ]; then
        echo "Installing opkg-make-index..."
        mkdir -p "${sdk_path}/staging_dir/host/bin"
        wget https://raw.githubusercontent.com/shr-project/opkg-utils/master/opkg-make-index -O "${sdk_path}/staging_dir/host/bin/opkg-make-index"
        chmod +x "${sdk_path}/staging_dir/host/bin/opkg-make-index"
    else
        echo "opkg-make-index is already installed."
    fi
}

# Add this function to check feeds status
check_feeds() {
    local sdk_path=$1
    
    # Check if feeds directory exists and has content
    if [ -d "${sdk_path}/feeds" ] && [ "$(ls -A ${sdk_path}/feeds)" ]; then
        # Check if package index exists and is recent (less than 1 day old)
        if [ -f "${sdk_path}/feeds/packages.index" ]; then
            local file_age=$(( $(date +%s) - $(stat -c %Y "${sdk_path}/feeds/packages.index") ))
            local day_seconds=86400
            
            if [ ${file_age} -lt ${day_seconds} ]; then
                echo "Feeds are up to date, skipping update..."
                return 0
            fi
        fi
    fi
    return 1
}

# Check if the required arguments are provided
if [ $# -ne 2 ]; then
    echo "Usage: $0 <model> <package_name>"
    exit 1
fi

MODEL=$1
PACKAGE_NAME=$2
VERSION=23.05.3
SDKDIR=/tmp/openwrt-sdk

# Set platform variables based on model
case $MODEL in
    "gl-mt300n-v2")
        PLATFORM="ramips"
        SUBTARGET="mt76x8"
        ;;
    "gl-ar300m")
        PLATFORM="ath79"
        SUBTARGET="generic"
        ;;
    "gl-mt3000"|"gl-mt6000")
        PLATFORM="mediatek"
        SUBTARGET="filogic"
        ;;
    "gl-e750")
        VERSION="snapshot"
        PLATFORM="ath79"
        SUBTARGET="nand"
        ;;
    "archer_mr200")
        PLATFORM="ramips"
        SUBTARGET="mt7620"
        ;;
    *)
        echo "Unsupported model. Supported models: gl-mt300n-v2, gl-ar300m, gl-mt3000, gl-mt6000, gl-e750, archer_mr200"
        exit 1
        ;;
esac

SDK_ARCHIVE="openwrt-sdk-${VERSION}-${PLATFORM}-${SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
DOWNLOAD_URL="https://downloads.openwrt.org/releases/${VERSION}/targets/${PLATFORM}/${SUBTARGET}/${SDK_ARCHIVE}"
SDK_PATH="${SDKDIR}/openwrt-sdk-${VERSION}-${PLATFORM}-${SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64"

# Main script logic
install_ncurses_libraries

# Prepare SDK directory
if [ ! -d "${SDKDIR}" ] ; then
    mkdir -p "${SDKDIR}"
fi

# Clean up existing SDK if it exists
# if [ -d "${SDK_PATH}" ]; then
#     echo "Removing existing SDK directory..."
#    rm -rf "${SDK_PATH}"
# fi

# Download and extract SDK
if [ ! -f "${SDKDIR}/${SDK_ARCHIVE}" ]; then
    echo "Downloading SDK..."
    (cd "${SDKDIR}" && curl -O "${DOWNLOAD_URL}")
fi

echo "Extracting SDK..."
tar xf "${SDKDIR}/${SDK_ARCHIVE}" -C "${SDKDIR}"

# Change to SDK directory
cd "${SDK_PATH}"

# Setup python environment with correct SDK path
setup_python_environment "${SDK_PATH}"

# Check and update feeds only if necessary
if ! check_feeds "${SDK_PATH}"; then
    echo "Updating feeds..."
    ./scripts/feeds update -a
    ./scripts/feeds install -a
else
    echo "Using existing feeds..."
fi

# Copy the custom package into the SDK, excluding .git directory
cp -r --no-preserve=ownership ~/TollGate/"${PACKAGE_NAME}"/[!.]* "${SDK_PATH}"/package/"${PACKAGE_NAME}"/ 2>/dev/null || :
mkdir -p "${SDK_PATH}"/package/"${PACKAGE_NAME}"
cp -r --no-preserve=ownership ~/TollGate/"${PACKAGE_NAME}"/.[!.]* "${SDK_PATH}"/package/"${PACKAGE_NAME}"/ 2>/dev/null || :

# Configure the SDK to include the package
make defconfig

# Build the package
make package/"${PACKAGE_NAME}"/compile V=s

# Find the built package and print its absolute path
BUILT_PACKAGE_PATH=$(find "${SDK_PATH}/bin" -name "${PACKAGE_NAME}_*.ipk")
if [ -n "${BUILT_PACKAGE_PATH}" ]; then
    echo "Package built successfully!"
    echo "IPK file location: ${BUILT_PACKAGE_PATH}"
else
    echo "Error: Could not find built package"
    exit 1
fi
