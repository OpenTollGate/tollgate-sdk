#!/bin/bash
set -e

SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# Check and install libncurses5-dev and libncursesw5-dev libraries
install_ncurses_libraries() {
    if ! dpkg -s libncurses5-dev libncursesw5-dev >/dev/null 2>&1; then
        echo "Installing libncurses5-dev and libncursesw5-dev packages..."
        sudo apt-get update
        sudo apt-get install -y libncurses5-dev libncursesw5-dev
    else
        echo "libncurses5-dev and libncursesw5-dev are already installed."
    fi
}

install_go() {
    # First check if go is in /usr/local/go/bin
    if [ -x "/usr/local/go/bin/go" ]; then
        # Add to PATH if not already there
        if [[ ":$PATH:" != *":/usr/local/go/bin:"* ]]; then
            export PATH=$PATH:/usr/local/go/bin
            # Add to ~/.bashrc if not already there
            if ! grep -q "/usr/local/go/bin" ~/.bashrc; then
                echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
            fi
        fi
        echo "Go is already installed."
        echo "Go version: $(/usr/local/go/bin/go version)"
        return 0
    fi

    # If go is not installed, proceed with installation
    echo "Installing Go..."
    sudo apt install -y pigz   # For multi-core unpack
    wget https://go.dev/dl/go1.23.4.linux-amd64.tar.gz
    sudo rm -rf /usr/local/go
    sudo tar -I pigz -C /usr/local -xf go1.23.4.linux-amd64.tar.gz
    export PATH=$PATH:/usr/local/go/bin
    # Add to ~/.bashrc if not already there
    if ! grep -q "/usr/local/go/bin" ~/.bashrc; then
        echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
    fi
    rm go1.23.4.linux-amd64.tar.gz
    
    # Verify Go installation
    if ! /usr/local/go/bin/go version &> /dev/null; then
        echo "Failed to install Go. Please install manually."
        exit 1
    fi
    
    echo "Go version: $(/usr/local/go/bin/go version)"
}

# Add this function to manage Python dependencies
setup_python_environment() {
    local sdk_path=$1
    
    if [ ! -f "${sdk_path}/staging_dir/host/bin/opkg-make-index" ]; then
        echo "Installing opkg-make-index..."
        mkdir -p "${sdk_path}/staging_dir/host/bin"
        wget https://raw.githubusercontent.com/shr-project/opkg-utils/master/opkg-make-index -O "${sdk_path}/staging_dir/host/bin/opkg-make-index"
        chmod +x "${sdk_path}/staging_dir/host/bin/opkg-make-index"
    else
        echo "opkg-make-index is already installed."
    fi
}

# Add this function to check feeds status
check_feeds() {
    local sdk_path=$1
    
    # Check if feeds directory exists and has content
    if [ -d "${sdk_path}/feeds" ] && [ "$(ls -A ${sdk_path}/feeds)" ]; then
        # Check if package index exists and is recent (less than 1 day old)
        if [ -f "${sdk_path}/feeds/packages.index" ]; then
            local file_age=$(( $(date +%s) - $(stat -c %Y "${sdk_path}/feeds/packages.index") ))
            local day_seconds=86400
            
            if [ ${file_age} -lt ${day_seconds} ]; then
                echo "Feeds are up to date, skipping update..."
                return 0
            fi
        fi
    fi
    return 1
}

# Check if the required arguments are provided
if [ $# -ne 2 ]; then
    echo "Usage: $0 <model> <package_name>"
    exit 1
fi

MODEL=$1
PACKAGE_NAME=$2
VERSION=23.05.3
SDKDIR=/tmp/openwrt-sdk

# Set platform variables based on model
case $MODEL in
    "gl-mt300n-v2")
        PLATFORM="ramips"
        SUBTARGET="mt76x8"
        ;;
    "gl-ar300m")
        PLATFORM="ath79"
        SUBTARGET="generic"
        ;;
    "gl-mt3000"|"gl-mt6000")
        PLATFORM="mediatek"
        SUBTARGET="filogic"
        ;;
    "gl-e750")
        VERSION="snapshot"
        PLATFORM="ath79"
        SUBTARGET="nand"
        ;;
    "archer_mr200")
        PLATFORM="ramips"
        SUBTARGET="mt7620"
        ;;
    *)
        echo "Unsupported model. Supported models: gl-mt300n-v2, gl-ar300m, gl-mt3000, gl-mt6000, gl-e750, archer_mr200"
        exit 1
        ;;
esac

SDK_ARCHIVE="openwrt-sdk-${VERSION}-${PLATFORM}-${SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
DOWNLOAD_URL="https://downloads.openwrt.org/releases/${VERSION}/targets/${PLATFORM}/${SUBTARGET}/${SDK_ARCHIVE}"
SDK_PATH="${SDKDIR}/openwrt-sdk-${VERSION}-${PLATFORM}-${SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64"

# Install dependencies
install_ncurses_libraries
install_go

# Prepare SDK directory
if [ ! -d "${SDKDIR}" ] ; then
    mkdir -p "${SDKDIR}"
fi

# Clean up existing SDK if it exists
# if [ -d "${SDK_PATH}" ]; then
#     echo "Removing existing SDK directory..."
#    rm -rf "${SDK_PATH}"
# fi

# Download and extract SDK
if [ ! -f "${SDKDIR}/${SDK_ARCHIVE}" ]; then
    echo "Downloading SDK..."
    (cd "${SDKDIR}" && curl -O "${DOWNLOAD_URL}")
fi

echo "Extracting SDK..."
tar -I "xz -T0" -xf "${SDKDIR}/${SDK_ARCHIVE}" -C "${SDKDIR}"

# Change to SDK directory
cd "${SDK_PATH}"

# Setup python environment with correct SDK path
setup_python_environment "${SDK_PATH}"

# Create necessary directories
# mkdir -p "${SDK_PATH}/package/${PACKAGE_NAME}"
# mkdir -p "${SDK_PATH}/custom_feeds/packages/${PACKAGE_NAME}"

echo "Script dir: $SCRIPT_DIR"
cp "${SCRIPT_DIR}"/feeds.conf "${SDK_PATH}"/feeds.conf

# Update feeds
echo "Updating feeds..."
"${SDK_PATH}"/./scripts/feeds update -a
"${SDK_PATH}"/./scripts/feeds install -a

# Verify the package files were copied correctly
echo "Verifying package files..."
if [ ! -f "${SDK_PATH}/package/feeds/custom/${PACKAGE_NAME}/Makefile" ]; then
    echo "Error: Package Makefile not found in ${SDK_PATH}/package/${PACKAGE_NAME}/"
    exit 1
fi

# Handle golang specifically
# echo "Setting up golang..."
# rm -rf "${SDK_PATH}/feeds/packages/lang/golang"
# cp -r "${SDK_PATH}/custom_feeds/packages/lang/golang" "${SDK_PATH}/feeds/packages/lang/."
# ./scripts/feeds install golang

# Configure and build
echo "Configuring SDK..."
make defconfig

echo "Building golang first..."
make package/feeds/custom/golang/compile V=sc

echo "Building package ${PACKAGE_NAME}..."
make package/"${PACKAGE_NAME}"/compile V=sc

# Find the built package and print its absolute path
BUILT_PACKAGE_PATH=$(find "${SDK_PATH}/bin/packages" -name "${PACKAGE_NAME}_*.ipk")
if [ -n "${BUILT_PACKAGE_PATH}" ]; then
    echo "Package built successfully!"
    echo "IPK file location: ${BUILT_PACKAGE_PATH}"
else
    echo "Error: Could not find built package"
    # Try to find where the package might be
    echo "Searching for package in all directories..."
    find "${SDK_PATH}/bin" -name "*.ipk" -exec ls -l {} \;
    exit 1
fi
