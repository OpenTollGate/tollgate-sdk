name: 'Build OpenWRT IPK'
description: 'Builds an OpenWRT package'
branding:
  color: purple
  icon: upload
inputs:
  packageName:
    description: 'The name of the OpenWRT package to build'
    required: true
  makeFilePath:
    description: 'The full filePath of the makeFile to use'
    required: true
runs:
  using: "composite"
  steps:
  - name: Setup python 3.12
    uses: actions/setup-python@v4
    with:
      python-version: "3.12"

  - name: Install dependencies
    shell: bash
    run: |
      sudo apt-get update
      # sudo apt-get install -y python3-setuptools
      sudo apt-get install -y jq git libncurses5-dev libncursesw5-dev pigz

  - name: Install Go
    shell: bash
    run: |
      if [ ! -x "/usr/local/go/bin/go" ]; then
        echo "Installing Go..."
        wget https://go.dev/dl/go1.23.4.linux-amd64.tar.gz
        sudo rm -rf /usr/local/go
        sudo tar -I pigz -C /usr/local -xf go1.23.4.linux-amd64.tar.gz
        export PATH=$PATH:/usr/local/go/bin
        echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
        rm go1.23.4.linux-amd64.tar.gz
      fi

#  - name: Install Blossom
#    uses: nick-fields/retry@v2
#    with:
#      timeout_minutes: 1
#      max_attempts: 3
#      command: |
#        # Preserve the original user's GOPATH
#        export GOPATH="$HOME/go"
#        export PATH="$PATH:/usr/local/go/bin:$GOPATH/bin"
#
#        # Create a directory for the project
#        echo "Creating directory for Blossom..."
#        sudo mkdir -p /opt/blossom
#        cd /opt/blossom
#
#        # Clone the repository if not exists
#        if [ ! -d "blossom" ]; then
#            git clone https://git.fiatjaf.com/blossom .
#        fi
#
#        # Download Go dependencies
#        echo "Downloading Go dependencies..."
#        go mod download
#
#        # Build the project
#        echo "Building Blossom..."
#        go build -o blossom .
#
#        # Make the binary executable and move to system-wide location
#        echo "Installing Blossom system-wide..."
#        chmod +x blossom
#        sudo cp blossom /usr/local/bin/
#
#        # Print success message
#        echo "Blossom has been successfully installed!"
#        echo "The blossom binary is now available system-wide in /usr/local/bin"

  - name: Install python dependancies and run tests
    uses: nick-fields/retry@v2
    with:
      timeout_minutes: 10
      max_attempts: 3
      command: |
        # source .venv/bin/activate
        pip3 install pytest
        pip3 install nostr
        pip3 install setuptools
#        pytest -v tests/test_blossom.py
#        pytest -v tests/test_aggregate_info.py

  - name: Download and extract SDK
    uses: nick-fields/retry@v2
    env:
      MODEL: gl-mt3000
    with:
      timeout_minutes: 6
      max_attempts: 3
      command: |
        VERSION=23.05.3

        # Determine PLATFORM and SUBTARGET based on MODEL (same logic as in build-firmware)
        case "${{ env.MODEL }}" in
          "gl-mt300n-v2")
            PLATFORM="ramips"
            SUBTARGET="mt76x8"
            ;;
          "gl-ar300m")
            PLATFORM="ath79"
            SUBTARGET="generic"
            ;;
          "gl-mt3000"|"gl-mt6000")
            PLATFORM="mediatek"
            SUBTARGET="filogic"
            ;;
          "gl-e750")
            VERSION="snapshot"
            PLATFORM="ath79"
            SUBTARGET="nand"
            ;;
          "archer_mr200")
            PLATFORM="ramips"
            SUBTARGET="mt7620"
            ;;
          *)
            echo "Unsupported model"
            exit 1
            ;;
        esac
        echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
        SDKDIR=/tmp/openwrt-sdk
        SDK_ARCHIVE="openwrt-sdk-${VERSION}-${PLATFORM}-${SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
        DOWNLOAD_URL="https://downloads.openwrt.org/releases/${VERSION}/targets/${PLATFORM}/${SUBTARGET}/${SDK_ARCHIVE}"
        SDK_PATH="${SDKDIR}/openwrt-sdk-${VERSION}-${PLATFORM}-${SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64"
        echo "SDK_PATH=$SDK_PATH" >> $GITHUB_ENV
        if [ ! -d "${SDKDIR}" ] ; then
          mkdir -p "${SDKDIR}"
        fi
        if [ ! -f "${SDKDIR}/${SDK_ARCHIVE}" ]; then
          echo "Downloading SDK..."
          (cd "${SDKDIR}" && curl -O "${DOWNLOAD_URL}")
        fi
        echo "Extracting SDK..."
        tar -I "xz -T0" -xf "${SDKDIR}/${SDK_ARCHIVE}" -C "${SDKDIR}"
        echo "Copying golang.mk to SDK include directory..."
        mkdir -p "${SDK_PATH}"/include
        cp "${SCRIPT_DIR}"/golang.mk "${SDK_PATH}"/include/golang.mk

        # Set GOOS and GOARCH based on the PLATFORM variable
        case "$PLATFORM" in
          "ramips")
            export GOOS="linux"
            export GOARCH="mips"
            if [ "$SUBTARGET" = "mt7620" ]; then
              export GOARM=""
              export GOMIPS="mips32"
              export GO386=""
            else
              export GOARM=""
              export GOMIPS="mips32"
              export GO386=""
            fi
            ;;
          "ath79")
            export GOOS="linux"
            export GOARCH="mips"
            export GOARM=""
            export GOMIPS="mips32"
            export GO386=""
            ;;
          "mediatek")
            export GOOS="linux"
            export GOARCH="arm64"
            export GOARM="arm64"
            export GOMIPS=""
            export GO386=""
            ;;
          *)
            echo "Unsupported platform for GOOS/GOARCH setting."
            exit 1
            ;;
        esac

        echo "Setting up python environment..."
        if [ ! -f "${SDK_PATH}/staging_dir/host/bin/opkg-make-index" ]; then
          echo "Installing opkg-make-index..."
          mkdir -p "${SDK_PATH}/staging_dir/host/bin"
          wget https://raw.githubusercontent.com/shr-project/opkg-utils/master/opkg-make-index -O "${SDK_PATH}/staging_dir/host/bin/opkg-make-index"
          chmod +x "${SDK_PATH}/staging_dir/host/bin/opkg-make-index"
        fi

        cp ${{github.action_path}}/feeds.conf "${SDK_PATH}"/feeds.conf # TODO: no custom feed
        cd "${SDK_PATH}"
        ./scripts/feeds update -a
        ./scripts/feeds install -a

#  - name: Copy makefile into SDK
#    id: copy_makefile_step
#    uses: nick-fields/retry@v2
#    with:
#      timeout_minutes: 5
#      max_attempts: 3
#      command: |
#        # cp lang package/feeds/custom/${{ inputs.packageName }}/compile
#        mkdir -p $SDK_PATH/package/${{ inputs.packageName }}
#        cp ${{ inputs.makeFilePath }} $SDK_PATH/package/${{ inputs.packageName }}/.


  - name: Build firmware2
    env:
      MODEL: gl-mt3000
      PLATFORM: ${{ env.PLATFORM }}
      SUBTARGET: ${{ env.SUBTARGET }}
    uses: nick-fields/retry@v2
    with:
      continue_on_error: 'false'
      timeout_minutes: 18
      max_attempts: 1
      command: |
        VERSION=23.05.3
        MODULE=${{ inputs.packageName }}
        SDKDIR=/tmp/openwrt-sdk
        SDK_PATH="${SDKDIR}/openwrt-sdk-${VERSION}-${PLATFORM}-${SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64"
        cd "${SDK_PATH}"
        make defconfig
        make package/feeds/custom/golang/compile #V=sc
        
        mkdir -p $SDK_PATH/include
        cp ${{github.action_path}}/golang.mk $SDK_PATH/include/golang.mk # TODO: list of includes should be composite actions input
        make package/feeds/custom/${{ inputs.packageName }}/compile # V=sc
        
        echo "built packages:"
        ls -R ${SDK_PATH}/bin/packages
        BUILT_PACKAGES_DIR=$(find "${SDK_PATH}/bin/packages" -name "${{ inputs.packageName }}*.ipk" | xargs dirname | head -n 1)
        PACKAGE_FULLPATH=$(find "${SDK_PATH}/bin/packages" -name "${{ inputs.packageName }}*.ipk" | head -n 1)
        echo "BUILT_PACKAGES_DIR=$BUILT_PACKAGES_DIR" >> $GITHUB_ENV
        echo "PACKAGE_FULLPATH=$PACKAGE_FULLPATH" >> $GITHUB_ENV
        echo "SCRIPT_DIR=$SCRIPT_DIR" >> $GITHUB_ENV

#  - name: Run aggregate_info
#    continue-on-error: true
#    env:
#      BUILT_PACKAGES_DIR: ${{ env.BUILT_PACKAGES_DIR }}
#      SCRIPT_DIR: ${{ env.SCRIPT_DIR }}
#      SDK_PATH: ${{ env.SDK_PATH }}
#    uses: nick-fields/retry@v2
#    with:
#      timeout_minutes: 5
#      max_attempts: 1
#      command: |
#        ls -la  ${{ env.BUILT_PACKAGES_DIR }}
#        echo "python3 ${{github.action_path}}/aggregate_info.py ${{ env.BUILT_PACKAGES_DIR }} ${{ env.SCRIPT_DIR }}/feeds.conf ${{ env.SDK_PATH }}"
#        python3 ${{github.action_path}}/aggregate_info.py "${{ env.BUILT_PACKAGES_DIR }}" "${{ env.SCRIPT_DIR }}/feeds.conf" "${{ env.SDK_PATH }}"

  - name: Upload to Blossom
    uses: Origami74/upload-blossom-action@main
    env:
      BUILT_PACKAGES_DIR: ${{ env.BUILT_PACKAGES_DIR }}
      PACKAGE_FULLPATH: ${{ env.PACKAGE_FULLPATH }}
    with:
      host: 'https://blossom.swissdash.site/'
      filePath: '${{ env.PACKAGE_FULLPATH }}'

#   PSEUDO CODE
#  - name: Create release event on Nostr
#    uses: Origami74/publish-release-note-nostr@main
#    env:
#      IPK_HASH: ${{ env.IPK_HASH }}
#      IPK_VERSION: ${{ env.IPK_VERSION }}
#    with:
#      blossom-servers:
#        - 'https://blossom.swissdash.site/'
#        - 'https://blossom.yoursite.com/'
#      nostr-relays:
#        - 'wss://relay.damus.io/'
#        - 'wss://relay.yoursite.com/'
#      fileHash: '${{ env.IPK_HASH }}'
#      version: '${{ env.IPK_VERSION }}'