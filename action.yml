# action.yml
name: 'Build OpenWRT IPK'
description: 'Builds an OpenWRT package'
branding:
  color: purple
  icon: upload
inputs:
  packageName:
    description: 'The name of the OpenWRT package to build'
    required: true
  makeFilePath:
    description: 'The full filePath of the makeFile to use'
    required: true
  model:
    description: 'The device model (e.g., gl-mt3000, gl-ar300m)'
    required: true
    default: 'gl-mt3000'
outputs:
  package_path:
    description: 'Path to the built package'
    value: ${{ steps.build_firmware.outputs.package_path }}
runs:
  using: "composite"
  steps:
  - name: Setup python 3.12
    uses: actions/setup-python@v4
    with:
      python-version: "3.12"

  - name: Install dependencies
    shell: bash
    run: |
      sudo apt-get update
      sudo apt-get install -y jq git libncurses5-dev libncursesw5-dev pigz

  - name: Install Go
    shell: bash
    run: |
      if [ ! -x "/usr/local/go/bin/go" ]; then
        echo "Installing Go..."
        wget https://go.dev/dl/go1.23.4.linux-amd64.tar.gz
        sudo rm -rf /usr/local/go
        sudo tar -I pigz -C /usr/local -xf go1.23.4.linux-amd64.tar.gz
        export PATH=$PATH:/usr/local/go/bin
        echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
        rm go1.23.4.linux-amd64.tar.gz
      fi

  - name: Install python dependancies and run tests
    uses: nick-fields/retry@v2
    with:
      timeout_minutes: 10
      max_attempts: 3
      command: |
        # pip3 install pytest
        # pip3 install nostr
        pip3 install setuptools

  - name: Download and extract SDK
    uses: nick-fields/retry@v2
    env:
      MODEL: ${{ inputs.model }}
    with:
      timeout_minutes: 6
      max_attempts: 3
      command: |
        VERSION=23.05.3

        # Determine PLATFORM and SUBTARGET based on MODEL
        case "${{ env.MODEL }}" in
          "gl-mt300n-v2")
            PLATFORM="ramips"
            SUBTARGET="mt76x8"
            ;;
          "gl-ar300m")
            PLATFORM="ath79"
            SUBTARGET="generic"
            ;;
          "gl-mt3000"|"gl-mt6000")
            PLATFORM="mediatek"
            SUBTARGET="filogic"
            ;;
          "gl-e750")
            VERSION="snapshot"
            PLATFORM="ath79"
            SUBTARGET="nand"
            ;;
          "archer_mr200")
            PLATFORM="ramips"
            SUBTARGET="mt7620"
            ;;
          *)
            echo "Unsupported model: ${{ env.MODEL }}"
            exit 1
            ;;
        esac
        echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
        SDKDIR=/tmp/openwrt-sdk
        SDK_ARCHIVE="openwrt-sdk-${VERSION}-${PLATFORM}-${SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
        DOWNLOAD_URL="https://downloads.openwrt.org/releases/${VERSION}/targets/${PLATFORM}/${SUBTARGET}/${SDK_ARCHIVE}"
        SDK_PATH="${SDKDIR}/openwrt-sdk-${VERSION}-${PLATFORM}-${SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64"
        echo "SDK_PATH=$SDK_PATH" >> $GITHUB_ENV
        if [ ! -d "${SDKDIR}" ] ; then
          mkdir -p "${SDKDIR}"
        fi
        if [ ! -f "${SDKDIR}/${SDK_ARCHIVE}" ]; then
          echo "Downloading SDK..."
          (cd "${SDKDIR}" && curl -O "${DOWNLOAD_URL}")
        fi
        echo "Extracting SDK..."
        tar -I "xz -T0" -xf "${SDKDIR}/${SDK_ARCHIVE}" -C "${SDKDIR}"
        # echo "Copying golang.mk to SDK include directory..."
        # cp "${SCRIPT_DIR}"/golang.mk "${SDK_PATH}"/include/golang.mk
        echo "Creating ${SDK_PATH}/include"
        mkdir -p "${SDK_PATH}"/include

        # Set GOOS and GOARCH based on the PLATFORM variable
        case "$PLATFORM" in
          "ramips")
            export GOOS="linux"
            export GOARCH="mips"
            if [ "$SUBTARGET" = "mt7620" ]; then
              export GOARM=""
              export GOMIPS="mips32"
              export GO386=""
            else
              export GOARM=""
              export GOMIPS="mips32"
              export GO386=""
            fi
            ;;
          "ath79")
            export GOOS="linux"
            export GOARCH="mips"
            export GOARM=""
            export GOMIPS="mips32"
            export GO386=""
            ;;
          "mediatek")
            export GOOS="linux"
            export GOARCH="arm64"
            export GOARM="arm64"
            export GOMIPS=""
            export GO386=""
            ;;
          *)
            echo "Unsupported platform for GOOS/GOARCH setting."
            exit 1
            ;;
        esac

        if [ ! -f "${SDK_PATH}/staging_dir/host/bin/opkg-make-index" ]; then
          echo "Installing opkg-make-index..."
          mkdir -p "${SDK_PATH}/staging_dir/host/bin"
          wget https://raw.githubusercontent.com/shr-project/opkg-utils/master/opkg-make-index -O "${SDK_PATH}/staging_dir/host/bin/opkg-make-index"
          chmod +x "${SDK_PATH}/staging_dir/host/bin/opkg-make-index"
        fi

        echo "Copying ${{github.action_path}}/feeds.conf to "${SDK_PATH}"/feeds.conf"
        cp ${{github.action_path}}/feeds.conf "${SDK_PATH}"/feeds.conf
        cd "${SDK_PATH}"
        ./scripts/feeds update -a
        ./scripts/feeds install -a

        echo "Installed feeds:"
        cat "${SDK_PATH}"/feeds.conf


  - name: Build firmware
    id: build_firmware
    env:
      MODEL: ${{ inputs.model }}
      PLATFORM: ${{ env.PLATFORM }}
      SUBTARGET: ${{ env.SUBTARGET }}
    uses: nick-fields/retry@v2
    with:
      continue_on_error: 'false'
      timeout_minutes: 18
      max_attempts: 1
      command: |
        VERSION=23.05.3
        MODULE=${{ inputs.packageName }}
        SDKDIR=/tmp/openwrt-sdk
        SDK_PATH="${SDKDIR}/openwrt-sdk-${VERSION}-${PLATFORM}-${SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64"
        
        # Debug information
        echo "Build firmware started"
        echo "Building for model: ${{ inputs.model }}"
        echo "Platform: ${{ env.PLATFORM }}"
        echo "Subtarget: ${{ env.SUBTARGET }}"
        echo "Package name: ${{ inputs.packageName }}"

        # After extracting SDK
        echo "Copying custom packages..."
        mkdir -p "${SDK_PATH}/package/feeds/custom"
        echo "cp -r ${{ github.workspace }}/lang/golang ${SDK_PATH}/package/feeds/custom/"
        cp -r "${{ github.workspace }}/lang/golang" "${SDK_PATH}/package/feeds/custom/"

        cd "${SDK_PATH}"

        make defconfig

        echo "Finished `make defconfig`"
        echo "ls "
        ls 
        echo "ls package/"
        ls package/
        echo "ls package/feeds"
        ls package/feeds
        echo "ls package/feeds/custom"
        ls package/feeds/custom
        echo "ls package/feeds/custom/golang"
        ls package/feeds/custom/golang

        make package/feeds/custom/golang/compile V=sc
        
        # Make sure include directory exists and copy golang.mk
        mkdir -p $SDK_PATH/include
        echo "github.action_path: ${{github.action_path}}"
        # echo "ls github.action_path"
        # ls ${{github.action_path}}

        # cp ${{github.action_path}}/golang.mk $SDK_PATH/include/golang.mk
        # make package/feeds/custom/${{ inputs.packageName }}/compile V=sc

        # Debug output to see what was built
        #echo "Contents of bin/packages directory:"
        #find "${SDK_PATH}/bin/packages" -type f -name "*.ipk" | sort

        # Find the package more robustly
        #PACKAGE_FULLPATH=$(find "${SDK_PATH}/bin/packages" -type f -name "${{ inputs.packageName }}*.ipk" | head -n 1)
        #if [ -z "$PACKAGE_FULLPATH" ]; then
        #  echo "ERROR: No package file found matching ${{ inputs.packageName }}*.ipk"
        #  exit 1
        #else
        #  echo "Found package: $PACKAGE_FULLPATH"
        #  echo "package_path=$PACKAGE_FULLPATH" >> $GITHUB_OUTPUT
        #  echo "PACKAGE_FULLPATH=$PACKAGE_FULLPATH" >> $GITHUB_ENV
        #fi
