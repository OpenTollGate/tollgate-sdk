# action.yml
name: 'OpenWrt SDK Action'
description: 'Build OpenWrt packages using SDK'
branding:
  color: purple
  icon: upload
inputs:
  packageName:
    description: 'The name of the OpenWRT package to build'
    required: true
  makeFilePath:
    description: 'The full filePath of the makeFile to use'
    required: true
  model:
    description: 'Target device model (e.g., gl-mt3000)'
    required: true
  platform:
    description: 'Target platform (e.g., mediatek)'
    required: true
  subtarget:
    description: 'Target subtarget (e.g., filogic)'
    required: true
  prebuilt_golang:
    description: 'Path to prebuilt golang package'
    required: false
    default: ''
  golang_hash:
    description: 'Expected SHA256 hash of the prebuilt golang package (optional)'
    required: false
  module:
    description: 'Name of the module to build (e.g., tollgate-module-relay-go)'
    required: true
outputs:
  package_path:
    description: 'Path to the built package'
    value: ${{ steps.build_firmware.outputs.package_path }}
runs:
  using: "composite"
  steps:
  - name: Setup python 3.12
    uses: actions/setup-python@v4
    with:
      python-version: "3.12"

  - name: Install dependencies
    shell: bash
    run: |
      sudo apt-get update
      sudo apt-get install -y jq git libncurses5-dev libncursesw5-dev pigz binutils-dev python3-pip
      sudo apt-get install -y python3-dev python3-setuptools debhelper dh-python # opkg build dependencies
      # pip3 install python-opkg opkg-utils

  - name: Install Go
    shell: bash
    run: |
      if [ ! -x "/usr/local/go/bin/go" ]; then
        echo "Installing Go..."
        wget https://go.dev/dl/go1.23.4.linux-amd64.tar.gz
        sudo rm -rf /usr/local/go
        sudo tar -I pigz -C /usr/local -xf go1.23.4.linux-amd64.tar.gz
        export PATH=$PATH:/usr/local/go/bin
        echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
        rm go1.23.4.linux-amd64.tar.gz
      fi

  - name: Install python dependancies and run tests
    uses: nick-fields/retry@v2
    with:
      timeout_minutes: 10
      max_attempts: 3
      command: |
        pip3 install setuptools

  - name: Download and extract SDK
    uses: nick-fields/retry@v2
    env:
      MODEL: ${{ inputs.model }}
    with:
      timeout_minutes: 6
      max_attempts: 3
      command: |
        VERSION=23.05.3

        # Determine PLATFORM and SUBTARGET based on MODEL
        case "${{ env.MODEL }}" in
          "gl-mt300n-v2")
            PLATFORM="ramips"
            SUBTARGET="mt76x8"
            ;;
          "gl-ar300m")
            PLATFORM="ath79"
            SUBTARGET="generic"
            ;;
          "gl-mt3000"|"gl-mt6000")
            PLATFORM="mediatek"
            SUBTARGET="filogic"
            ;;
          "gl-e750")
            VERSION="snapshot"
            PLATFORM="ath79"
            SUBTARGET="nand"
            ;;
          "archer_mr200")
            PLATFORM="ramips"
            SUBTARGET="mt7620"
            ;;
          *)
            echo "Unsupported model: ${{ env.MODEL }}"
            exit 1
            ;;
        esac
        echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
        SDKDIR=/tmp/openwrt-sdk
        SDK_ARCHIVE="openwrt-sdk-${VERSION}-${PLATFORM}-${SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
        DOWNLOAD_URL="https://downloads.openwrt.org/releases/${VERSION}/targets/${PLATFORM}/${SUBTARGET}/${SDK_ARCHIVE}"
        SDK_PATH="${SDKDIR}/openwrt-sdk-${VERSION}-${PLATFORM}-${SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64"
        echo "SDK_PATH=$SDK_PATH" >> $GITHUB_ENV
        if [ ! -d "${SDKDIR}" ] ; then
          mkdir -p "${SDKDIR}"
        fi
        if [ ! -f "${SDKDIR}/${SDK_ARCHIVE}" ]; then
          echo "Downloading SDK..."
          (cd "${SDKDIR}" && curl -O "${DOWNLOAD_URL}")
        fi
        echo "Extracting SDK..."
        tar -I "xz -T0" -xf "${SDKDIR}/${SDK_ARCHIVE}" -C "${SDKDIR}"
        
        # Create necessary SDK directories
        mkdir -p "${SDK_PATH}/include"
        mkdir -p "${SDK_PATH}/bin/packages/$PLATFORM"
        
        # Set GOOS and GOARCH based on the PLATFORM variable
        case "$PLATFORM" in
          "ramips")
            export GOOS="linux"
            export GOARCH="mips"
            if [ "$SUBTARGET" = "mt7620" ]; then
              export GOARM=""
              export GOMIPS="mips32"
              export GO386=""
            else
              export GOARM=""
              export GOMIPS="mips32"
              export GO386=""
            fi
            ;;
          "ath79")
            export GOOS="linux"
            export GOARCH="mips"
            export GOARM=""
            export GOMIPS="mips32"
            export GO386=""
            ;;
          "mediatek")
            export GOOS="linux"
            export GOARCH="arm64"
            export GOARM="arm64"
            export GOMIPS=""
            export GO386=""
            ;;
          *)
            echo "Unsupported platform for GOOS/GOARCH setting."
            exit 1
            ;;
        esac


        echo "Copying ${{github.action_path}}/feeds.conf to "${SDK_PATH}"/feeds.conf"
        cp ${{github.action_path}}/feeds.conf "${SDK_PATH}"/feeds.conf
        cd "${SDK_PATH}"
        ./scripts/feeds update -a
        ./scripts/feeds install -a


  - name: Install opkg utilities
    shell: bash
    env:
      PLATFORM: ${{ env.PLATFORM }}
      SUBTARGET: ${{ env.SUBTARGET }}
    run: |
      VERSION=23.05.3
      SDKDIR=/tmp/openwrt-sdk
      SDK_PATH="${SDKDIR}/openwrt-sdk-${VERSION}-${PLATFORM}-${SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64"

      # Create opkg-utils directory within the SDK
      OPKG_UTILS_DIR="${SDK_PATH}/staging_dir/host/bin/opkg-utils"
      mkdir -p "${SDK_PATH}/staging_dir/host/bin"

      # Clone the repository into the specified directory
      echo "Cloning opkg-utils repository..."
      git clone https://github.com/c03rad0r/opkg-utils.git "${OPKG_UTILS_DIR}"

      # Change to the cloned directory using full path
      cd "${OPKG_UTILS_DIR}"

      # Build and install
      make
      sudo make install

  - name: Verify opkg-build
    shell: bash
    run: |
      which opkg-build || echo "opkg-build not found!"
      opkg-build --version || true

  - name: Debug Makefile dump files
    shell: bash
    env:
      PLATFORM: ${{ env.PLATFORM }}
      SUBTARGET: ${{ env.SUBTARGET }}
    run: |
      VERSION=23.05.3
      SDKDIR=/tmp/openwrt-sdk
      SDK_PATH="${SDKDIR}/openwrt-sdk-${VERSION}-${PLATFORM}-${SUBTARGET}_gcc-12.3.0_musl.Linux-x86_64"

      echo "Looking for SDK path: ${SDK_PATH}"
      if [ ! -d "${SDK_PATH}" ]; then
        echo "SDK directory does not exist!"
        ls -la "${SDKDIR}" || echo "SDKDIR doesn't exist"
        exit 1
      fi

      echo "Examining package dump files..."
      if [ ! -d "${SDK_PATH}/logs" ]; then
        echo "Logs directory does not exist yet - this is normal if feeds haven't been processed"
        mkdir -p "${SDK_PATH}/logs/feeds"
        exit 0
      fi

      # Look for dump files more flexibly
      find "${SDK_PATH}" -name "dump.txt" | while read dumpfile; do
        echo "==== DUMP FILE: $dumpfile ===="
        cat "$dumpfile"
        echo ""
      done

      # If no dump files found, this is expected at this stage
      if [ ! "$(find "${SDK_PATH}" -name "dump.txt")" ]; then
        echo "No dump files found - this is expected if feeds haven't been processed yet"
      fi
      

  - name: Setup Build Environment
    shell: bash
    run: |
      # If prebuilt golang is provided, install it
      if [ -n "${{ inputs.prebuilt_golang }}" ]; then
        echo "Using prebuilt golang package..."
        mkdir -p "${SDK_PATH}/bin/packages/${{ inputs.platform }}"
        cp "${{ inputs.prebuilt_golang }}" "${SDK_PATH}/bin/packages/${{ inputs.platform }}/"
      fi

  - name: Install Prebuilt Golang
    if: inputs.prebuilt_golang != ''
    shell: bash
    run: |
      if [ -f "${{ inputs.prebuilt_golang }}" ]; then
        echo "Installing prebuilt golang package..."
        mkdir -p "${SDK_PATH}/bin/packages/${{ inputs.platform }}"
        cp "${{ inputs.prebuilt_golang }}" "${SDK_PATH}/bin/packages/${{ inputs.platform }}/"
        cd "${SDK_PATH}"
        # Install the prebuilt package
        ./scripts/feeds update -a
        ./scripts/feeds install golang
      else
        echo "Error: Prebuilt golang package not found at ${{ inputs.prebuilt_golang }}"
          exit 1
      fi
        
    # Module specific build steps start here
  - name: Build module specified in inputs
    shell: bash
    run: |
      cd "${SDK_PATH}"
      
      # Set MODULE from input
      MODULE="${{ inputs.module }}"
      
      # Configure the build
      make defconfig

      # Make sure include directory exists and copy golang.mk
      mkdir -p $SDK_PATH/include
      cp ${{github.action_path}}/golang.mk $SDK_PATH/include/golang.mk
      # make package/feeds/custom/${{ inputs.packageName }}/compile V=sc

      # 8. Parse feed name from module name
      FEED_NAME=$(echo "$MODULE" | sed -E 's/tollgate-module-(.+)-go/\1/')
      echo "Using feed name: $FEED_NAME for module: $MODULE"

      # 9. Update and install the module feed
      ./scripts/feeds update $FEED_NAME
      ./scripts/feeds install -a -p $FEED_NAME

      # Check if the module is available
      ./scripts/feeds list -r | grep $MODULE

      # 10. Enable the module in the config
      echo "CONFIG_PACKAGE_$MODULE=y" >> .config

      # Debug the package structure
      echo "Debugging package structure:"
      echo "Contents of feed directory:"
      ls -la "${SDK_PATH}/feeds/$FEED_NAME/package/$MODULE" || echo "Feed directory doesn't exist"

      echo "Contents of build directory:"
      BUILD_DIR_PATTERN="${SDK_PATH}/build_dir/target-aarch64_cortex-a53_musl/$MODULE-*"
      ls -la $BUILD_DIR_PATTERN || echo "Build directory doesn't exist"

      echo "Checking Makefile content:"
      cat "${SDK_PATH}/feeds/$FEED_NAME/package/$MODULE/Makefile" || echo "Makefile not found"

      # TODO: this stuff is specific to the relay module
      # TODO: Put it in a different step and only run when packaging the relay module?
      # Find the build directory and pin the problematic package version
      BUILD_DIR_PREFIX="${SDK_PATH}/build_dir/target-aarch64_cortex-a53_musl"
      PACKAGE_BUILD_DIR=$(find "${BUILD_DIR_PREFIX}" -maxdepth 1 -name "$MODULE-*" -type d | head -n 1)
      if [ -n "$PACKAGE_BUILD_DIR" ]; then
        echo "Package build directory: $PACKAGE_BUILD_DIR"
        echo "Pinning bytedance/sonic package version to fix compilation issues..."
        cd "$PACKAGE_BUILD_DIR" && \
        go mod edit -replace github.com/bytedance/sonic=github.com/bytedance/sonic@1.12.10 && \
        go mod edit -require github.com/bytedance/sonic@1.12.10 && \
        go mod tidy && \
        # Verify the pinning worked
        go list -m github.com/bytedance/sonic && \
        # Create vendor directory
        go mod vendor && \
        echo "Checking if sonic is properly vendored:"
        find vendor -path "*/bytedance/sonic*" || echo "Failed to vendor sonic package"
        echo "go.mod after pinning:"
        cat "$PACKAGE_BUILD_DIR/go.mod"
      fi

      echo "Checking if src directory exists:"
      ls -la "${SDK_PATH}/feeds/$FEED_NAME/package/$MODULE/src" || echo "src directory doesn't exist"

      # Add these to your debug step
      echo "Complete file listing in build directory:"
      find "${PKG_BUILD_DIR}" -type f -name "*.go" | sort || echo "No Go files found"

      echo "Go environment:"
      go env || echo "Go not available"

      echo "go.mod contents:"
      cat "${PKG_BUILD_DIR}/go.mod" || echo "go.mod not found"

      # Extract binary name from the module name (replace "tollgate-module-" with "tollgate-")
      BINARY_NAME=$(echo "$MODULE" | sed 's/tollgate-module-/tollgate-/')

      # Try to compile with the feed path
      make package/feeds/$FEED_NAME/$MODULE/compile V=sc

      echo "NOTE: Error messages about '.go_work/build/src/...' not being found are expected and can be ignored"
      echo "      These occur because we're using a custom build process that bypasses OpenWrt's default Go workspace."

      # Find the built binary in the build directory
      BUILD_DIR_PREFIX="${SDK_PATH}/build_dir/target-aarch64_cortex-a53_musl"
      echo "Searching for the built binary ($BINARY_NAME):"
      find "${BUILD_DIR_PREFIX}" -name "$BINARY_NAME" -type f -executable | sort

      # Get the specific build directory for this package
      PACKAGE_BUILD_DIR=$(find "${BUILD_DIR_PREFIX}" -maxdepth 1 -name "$MODULE-*" -type d | head -n 1)
      if [ -n "$PACKAGE_BUILD_DIR" ]; then
        echo "Package build directory: $PACKAGE_BUILD_DIR"
        echo "Listing contents of build directory:"
        ls -la "$PACKAGE_BUILD_DIR"

        # Check if binary exists
        if [ -f "$PACKAGE_BUILD_DIR/$BINARY_NAME" ]; then
          echo "Binary found at: $PACKAGE_BUILD_DIR/$BINARY_NAME"
          echo "binary_path=$PACKAGE_BUILD_DIR/$BINARY_NAME" >> $GITHUB_OUTPUT
          echo "BINARY_PATH=$PACKAGE_BUILD_DIR/$BINARY_NAME" >> $GITHUB_ENV
        else
          echo "Binary not found in expected location!"
          # Search recursively through the build directory
          find "$PACKAGE_BUILD_DIR" -name "$BINARY_NAME" -type f -executable
        fi
      else
        echo "Could not find package build directory!"
      fi

      # Also check the .go_work directory which might contain the compiled binary
      GO_WORK_DIR=$(find "${BUILD_DIR_PREFIX}" -path "*/.go_work/build/bin/linux_arm64" -type d | head -n 1)
      if [ -n "$GO_WORK_DIR" ]; then
        echo "Go work binary directory: $GO_WORK_DIR"
        ls -la "$GO_WORK_DIR"
      fi

      # If that doesn't work, try a direct path
      # You might need to find out the actual path where it's installed
      find "${SDK_PATH}/feeds" -name "$MODULE" -type d

      # Debug output to see what was built
      echo "Contents of bin/packages directory:"
      find "${SDK_PATH}/bin/packages" -type f -name "*.ipk" | sort

      # 11. Check the module's Makefile
      MAKEFILE_PATH="${SDK_PATH}/feeds/$FEED_NAME/package/$MODULE/Makefile"
      if [ -f "$MAKEFILE_PATH" ]; then
        echo "Found Makefile for $MODULE at $MAKEFILE_PATH"
        echo "Checking Makefile content:"
        cat "$MAKEFILE_PATH"
      else
        echo "ERROR: Makefile not found at $MAKEFILE_PATH"
        echo "Creating Makefile from template..."

        # Create directory if it doesn't exist
        mkdir -p "${SDK_PATH}/feeds/$FEED_NAME/package/$MODULE"
        echo "Makefile not found in $MAKEFILE_PATH"
        exit 1
      fi
      
      # Find the IPK file and store its path in PACKAGE_FULLPATH
      PACKAGE_FULLPATH=$(find "${SDK_PATH}/bin/packages" -name "${MODULE}_*.ipk" | head -n 1)
      echo "Found package at: $PACKAGE_FULLPATH"

      # Save to GitHub outputs and environment
      if [ -n "$PACKAGE_FULLPATH" ]; then
        echo "Package found at: $PACKAGE_FULLPATH"
        echo "package_path=$PACKAGE_FULLPATH" >> $GITHUB_OUTPUT
        echo "PACKAGE_FULLPATH=$PACKAGE_FULLPATH" >> $GITHUB_ENV
      else
        echo "ERROR: Could not find package file matching ${MODULE}_*.ipk"
        echo "Available packages:"
        find "${SDK_PATH}/bin/packages" -name "*.ipk"
        exit 1
      fi

      # Validate IPK structure
      echo "Validating IPK file format..."
      if [ -f "$PACKAGE_FULLPATH" ]; then
        echo "package_path=$PACKAGE_FULLPATH" >> $GITHUB_OUTPUT
        echo "PACKAGE_FULLPATH=$PACKAGE_FULLPATH" >> $GITHUB_ENV
      else
        echo "ERROR: Package file not found at $PACKAGE_FULLPATH"
        exit 1
      fi

  # Add fallback build logic if prebuilt package isn't provided
  - name: Build Golang (Fallback)
    if: inputs.prebuilt_golang == ''
    shell: bash
    run: |
      echo "No prebuilt golang package provided, building from source..."
      # Original golang build steps here

